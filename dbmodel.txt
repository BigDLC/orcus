Hosts
id:integer, name:string

Pools
id, name:string, host_id:integer

host_poolmaps (manytomany)

Actions (actual actions, each with its own unique args)  These are auto-inserted into Chains for chains-of-one.
id, description:string, type:string, pool_id:integer

Should poolids be associated with generic actions? or chains?

----------
Chains are the basic building block for building automations.
need some way of handling mulitple children per parent.  
 - Need a parenting table, doing a self referential one to many?
 - Parent_table:  parent_chain_id:integer child_chain_id:integer
    
    So, Action is the class
    Chain inherits from Action
     There needs to be an instance of Chain that can be tracked.
    parents map chains to parent chains.
    There needs to be a "root" instance in each chain.  perhaps a "start" action?


Chains  (many to many with Parents table)
id, action_id:integer, pool_id:integer, condition:string, retries:integer

Parents  
id, parent_chain_id:integer child_chain_id:integer

----------
This is the master table that you activate/deactivate/schedule things to do:  
This starts the chain?  
Could two automations point to the same chain?
Can I have two chains that share the same subchains?
Should the true/false condition flag be at the chain level, or at the parent level?


- Still questions on how to define start and end time conditions.

Automations
id, chain_id:integer, active:boolean, condition:string

----------

Events (this is the event log)
id, chain_id, action_id, date, description


=== 
old structures

# ActionArgs  (the ACTUAL arguments for every unique action)
# id, action_id:integer, argname, argvalue 
#   
# ActionsTypes (types of actions available)
# id, name:string 
# 
# ActionTypeArgs (master list of NAMES of arguments needed for each actiontype, used for generating the web form)
# id, action_type_id:integer, argname:string, description:string

# Chains:  need instance version of this
ChainInstance
chain_id:integer status:boolean completed:datetime starttime:datetime timeout:integer 

# parents:  need instance version of this??? Or can I just reference the parent relationships? I think so, because Im not adding any value or information with a second table.  Its just referencing stuff in the first.

parent_id:integer ??? do i need to reference the parent class?  probably
parent_id:integer parent_chain_instance_id:integer child_chain_instance_id:integer



create_table "parents", :force => true do |t|
    t.integer  "parent_chain_id"
    t.integer  "child_chain_id"
    t.datetime "created_at"
    t.datetime "updated_at"
  end



create_table "chains", :force => true do |t|
    t.integer  "action_id"
    t.boolean  "precondition"
    t.integer  "retries"
    t.datetime "created_at"
    t.datetime "updated_at"
  end


should the timeout be in the original CHAIN, or in each individual instance?  It might be useful to alter the timeout for a particular instance.  Dunno.

